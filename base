#!/usr/bin/env python3

import argparse
import datetime
import importlib
import os
import subprocess
import sys
import time
import timeit

# /!\ all odoo-required libs must be installed globally or use the same virtualenv
# otherwise the import will fail
src = os.environ.get('ODOO_SRC', '%s/src/odoo' % os.environ.get('HOME', ''))
sys.path.insert(0, src)
import odoo


def parse():
    parser = argparse.ArgumentParser(description="Odoo Performance Testing Tools")
    parser.add_argument('script', type=str, nargs=1, help='script executing odoo code to benchmark')
    parser.add_argument('--database', '-d', type=str, nargs=1, help='database to benchmark')
    parser.add_argument('--timeit', '-t', nargs='?', default=1, help='time the script execution')
    parser.add_argument(
        '--persist', '-p', action='store_true',
        help='Whether the actions performed by the script should be committed to db or not'
    )
    parser.add_argument(
        '--graph', '-g', action='store_true',
        help='Whether a flamegraph should be generated for the benchmark script'
    )
    parser.add_argument(
        '--output', '-o', nargs=1,
        help='Filepath of the generated flamegraph. Requires --graph/-g'
    )
    return parser.parse_args()


def flamegraph(args):
    if not args.graph:
        return
    pid = os.getpid()
    fpath = args.output[0] or os.path.join(os.getcwd(), 'perf-%s.svg' % datetime.datetime.now())
    pf = subprocess.Popen(['sudo', 'pyflame', '-p', str(pid), '-x'], stdout=subprocess.PIPE)
    with open(fpath, 'w') as f:
        fg = subprocess.Popen(['./flamegraph.pl'], stdin=pf.stdout, stdout=f)
        fg.communicate()
    print("Flamegraph generated at %s" % fpath)


TIME_MAP = {
    0: 's',
    1: 'ms',
    2: 'Î¼s',
    3: 'ns',
}


def to_human_time(t, n):
    iter_t = t / n
    depth = 0

    while iter_t < 1:
        iter_t *= 1000
        depth += 1

    return f"{round(iter_t, 2)}{TIME_MAP[depth]}"


def main():
    args = parse()

    try:
        script = importlib.import_module('scripts.%s' % args.script[0])
    except ImportError:
        print("The script %s could not be found, make sure to place it in the scripts directory!"
                % args.script)
        raise

    db = args.database[0] or 'perf'
    reg = odoo.registry(db)

    with odoo.api.Environment.manage():
        with reg.cursor() as cr:
            env = odoo.api.Environment(cr, odoo.SUPERUSER_ID, {})

            if args.timeit:
                n = int(args.timeit[0])
                # make this a script option
                ttime = timeit.timeit('script.main(env)', number=n, globals=locals())
                print(to_human_time(ttime, n))
            else:
                script.main(env)

            if args.persist:
                # TODO: version < 13 ???
                env['base'].flush()
                cr.commit()
            else:
                cr.rollback()


if __name__ == '__main__':
    main()
